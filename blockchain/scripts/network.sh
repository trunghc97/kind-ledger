#!/bin/bash

# Kind-Ledger Network Management Script
# Qu·∫£n l√Ω m·∫°ng Fabric (up/down)

set -e

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Th∆∞ m·ª•c g·ªëc
ROOT_DIR=$(pwd)
BLOCKCHAIN_DIR="$ROOT_DIR/blockchain"

echo -e "${GREEN}üåê Kind-Ledger Network Management${NC}"
echo "=================================="

# Ki·ªÉm tra docker v√† docker-compose
check_docker() {
    echo -e "${YELLOW}üìã Ki·ªÉm tra Docker...${NC}"
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng c√†i ƒë·∫∑t Docker.${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng c√†i ƒë·∫∑t Docker Compose.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Docker v√† Docker Compose ƒë√£ s·∫µn s√†ng${NC}"
}

# Kh·ªüi ƒë·ªông m·∫°ng
start_network() {
    echo -e "${YELLOW}üöÄ Kh·ªüi ƒë·ªông m·∫°ng Kind-Ledger...${NC}"
    
    cd "$ROOT_DIR"
    
    # Ki·ªÉm tra xem crypto materials ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
    if [ ! -d "$BLOCKCHAIN_DIR/crypto-config" ]; then
        echo -e "${RED}‚ùå Crypto materials ch∆∞a ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ch·∫°y ./generate.sh tr∆∞·ªõc.${NC}"
        exit 1
    fi
    
    # Kh·ªüi ƒë·ªông c√°c container
    docker-compose up -d
    
    echo -e "${GREEN}‚úÖ M·∫°ng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông${NC}"
    echo -e "${YELLOW}‚è≥ ƒêang ch·ªù c√°c container kh·ªüi ƒë·ªông ho√†n t·∫•t...${NC}"
    
    # Ch·ªù c√°c container kh·ªüi ƒë·ªông
    sleep 30
    
    # Ki·ªÉm tra tr·∫°ng th√°i c√°c container
    echo -e "${YELLOW}üìä Tr·∫°ng th√°i c√°c container:${NC}"
    docker-compose ps
    
    echo -e "${GREEN}üéâ M·∫°ng Kind-Ledger ƒë√£ s·∫µn s√†ng!${NC}"
}

# D·ª´ng m·∫°ng
stop_network() {
    echo -e "${YELLOW}üõë D·ª´ng m·∫°ng Kind-Ledger...${NC}"
    
    cd "$ROOT_DIR"
    
    docker-compose down
    
    echo -e "${GREEN}‚úÖ M·∫°ng ƒë√£ ƒë∆∞·ª£c d·ª´ng${NC}"
}

# Restart m·∫°ng
restart_network() {
    echo -e "${YELLOW}üîÑ Kh·ªüi ƒë·ªông l·∫°i m·∫°ng Kind-Ledger...${NC}"
    
    stop_network
    sleep 5
    start_network
}

# X√≥a t·∫•t c·∫£ (bao g·ªìm volumes)
clean_network() {
    echo -e "${YELLOW}üßπ X√≥a t·∫•t c·∫£ d·ªØ li·ªáu m·∫°ng...${NC}"
    
    cd "$ROOT_DIR"
    
    docker-compose down -v
    docker system prune -f
    
    echo -e "${GREEN}‚úÖ D·ªØ li·ªáu m·∫°ng ƒë√£ ƒë∆∞·ª£c x√≥a${NC}"
}

# Ki·ªÉm tra logs
show_logs() {
    echo -e "${YELLOW}üìã Hi·ªÉn th·ªã logs...${NC}"
    
    cd "$ROOT_DIR"
    
    if [ -n "$1" ]; then
        docker-compose logs -f "$1"
    else
        docker-compose logs -f
    fi
}

# Ki·ªÉm tra tr·∫°ng th√°i
show_status() {
    echo -e "${YELLOW}üìä Tr·∫°ng th√°i m·∫°ng:${NC}"
    
    cd "$ROOT_DIR"
    
    docker-compose ps
    
    echo -e "\n${YELLOW}üîç Ki·ªÉm tra k·∫øt n·ªëi:${NC}"
    
    # Ki·ªÉm tra orderer
    if curl -s http://localhost:7050 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Orderer: OK${NC}"
    else
        echo -e "${RED}‚ùå Orderer: Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c${NC}"
    fi
    
    # Ki·ªÉm tra c√°c peer
    for port in 7051 8051 9051 10051; do
        if curl -s http://localhost:$port > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Peer port $port: OK${NC}"
        else
            echo -e "${RED}‚ùå Peer port $port: Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c${NC}"
        fi
    done
}

# Hi·ªÉn th·ªã help
show_help() {
    echo -e "${GREEN}Kind-Ledger Network Management Script${NC}"
    echo "=================================="
    echo ""
    echo "S·ª≠ d·ª•ng: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  up       - Kh·ªüi ƒë·ªông m·∫°ng"
    echo "  down     - D·ª´ng m·∫°ng"
    echo "  restart  - Kh·ªüi ƒë·ªông l·∫°i m·∫°ng"
    echo "  clean    - X√≥a t·∫•t c·∫£ d·ªØ li·ªáu"
    echo "  logs     - Hi·ªÉn th·ªã logs (c√≥ th·ªÉ ch·ªâ ƒë·ªãnh service)"
    echo "  status   - Ki·ªÉm tra tr·∫°ng th√°i"
    echo "  help     - Hi·ªÉn th·ªã help n√†y"
    echo ""
    echo "V√≠ d·ª•:"
    echo "  $0 up                    # Kh·ªüi ƒë·ªông m·∫°ng"
    echo "  $0 logs orderer          # Xem logs c·ªßa orderer"
    echo "  $0 status                # Ki·ªÉm tra tr·∫°ng th√°i"
}

# Main function
main() {
    case "${1:-help}" in
        up)
            check_docker
            start_network
            ;;
        down)
            stop_network
            ;;
        restart)
            check_docker
            restart_network
            ;;
        clean)
            clean_network
            ;;
        logs)
            show_logs "$2"
            ;;
        status)
            show_status
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Command kh√¥ng h·ª£p l·ªá: $1${NC}"
            show_help
            exit 1
            ;;
    esac
}

# Ch·∫°y script
main "$@"
